using System;
using System.Collections.Generic;
using System.Text;

namespace Isen.AntoineBerenguer.Library
{
    /// <summary>
    /// Interface for a tree node containing a GUID, a string value, a parent if applicable and a list of children nodes. Can be checked for equality with another node.
    /// </summary>
    interface INode<T> : IEquatable<Node<T>>
    {
        /// <summary>
        /// The value attached to the node.
        /// </summary>
        T Value { get; set; }
        /// <summary>
        /// The GUID attached to the node. Autogenerated.
        /// </summary>
        Guid Id { get; }
        /// <summary>
        /// The parent of the node, if it exists. Null otherwise.
        /// </summary>
        Node<T> Parent { get; set; }
        /// <summary>
        /// A list containing all children of the node, if any. Empty otherwise.
        /// </summary>
        List<Node<T>> Children { get; set; }
        /// <summary>
        /// The number of ancestors a node has. The root of a tree has a depth of 0.
        /// </summary>
        int Depth { get; }
        /// <summary>
        /// Add a child to a node's child list. If null is given, do nothing.
        /// </summary>
        /// <param name="child"></param>
        void AddChildNode(Node<T> child);
        /// <summary>
        /// Add a list of nodes as children
        /// </summary>
        /// <param name="nodeList"></param>
        void AddNodes(IEnumerable<Node<T>> nodeList);
        /// <summary>
        /// Removes the node bearing the same GUID as the one given as parameter, if there is one. Otherwise, do nothing.
        /// </summary>
        /// <param name="id"></param>
        void RemoveChildNode(Guid id);
        /// <summary>
        /// Removes the node equal to the one given as parameter, if there is one. Otherwise, do nothing.
        /// </summary>
        /// <param name="node"></param>
        void RemoveChildNode(Node<T> node);
        /// <summary>
        /// Return the node matching the provided GUID, or failing that null.
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        Node<T> FindTraversing(Guid id);

        /// <summary>
        /// Return the node given as a parameter, or failing that null.
        /// </summary>
        /// <param name="node"></param>
        /// <returns></returns>
        Node<T> FindTraversing(Node<T> node);
    }
}
